package dan.woodward.plugin;

import java.util.HashMap;
import java.util.Map;

import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerCommandPreprocessEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.event.player.PlayerToggleSprintEvent;
import org.bukkit.plugin.java.JavaPlugin;

public class RunFast extends JavaPlugin implements Listener {

	private final static float speed_slow = 0.05F;
	private final static float speed_normal = 0.2F;
	private final static float speed_fast = 0.3F;
	private final static float speed_faster = 0.4F;
	private final static float speed_fastest = 0.5F;
	private final static float speed_insane = 0.6F;
	private final static float speed_ludicrous = 0.999F;

	private final Map<Player, Float> playerSpeedCache = new HashMap<>();
//	private final Map<Player, Location> playerLocCache = new HashMap<>();
//	private final Map<Player, Long> playerTimeCache = new HashMap<>();

	@SuppressWarnings("serial")
	private final Map<String, Float> speeds = new HashMap<String, Float>() {{
		put("slow", speed_slow);
		put("normal", speed_normal);
		put("fast", speed_fast);
		put("faster", speed_faster);
		put("fastest", speed_fastest);
		put("insane", speed_insane);
		put("ludicrous", speed_ludicrous);
	}};

	@EventHandler
	public void onLogin(PlayerJoinEvent event) {
		Player player = event.getPlayer();
		player.setFlySpeed(speed_ludicrous);
//		playerLocCache.put(player, player.getLocation());
//		playerTimeCache.put(player, System.currentTimeMillis());
	}

	@Override
	public void onEnable(){
		getServer().getPluginManager().registerEvents(this, this);
	}

//	@EventHandler
//	public void onPlayerMoveEvent(PlayerMoveEvent event) {
//		Player player = event.getPlayer();
//
//		if (!playerLocCache.containsKey(player)) {
//			playerLocCache.put(player, player.getLocation());
//			playerTimeCache.put(player, System.currentTimeMillis());
//		}
//
//		if (player.isFlying()) {
//			long now = System.currentTimeMillis();
//			Location lastLoc = playerLocCache.get(player);
//			long lastTime = playerTimeCache.get(player);
//			if (now - lastTime > 500) {
//
//				double speed = lastLoc.distance(player.getLocation());
//				double percent = speed / 60;
//
//				getLogger().info(player.getName() + " Speed: " + (int)(percent*100) + "%");
//				playerLocCache.put(player, player.getLocation());
//				playerTimeCache.put(player, now);
//				float newSpeed = (float)percent + 0.15F;
//
//				player.setFlySpeed(newSpeed > 1 ? 1: newSpeed);
//			}
//		} else {
//			player.setFlySpeed(speed_slow);
//		}
//	}

	@EventHandler
	public void onCommand(PlayerCommandPreprocessEvent event) {
		String[] commandArgs = event.getMessage().substring(1).toLowerCase().split("\\s+");

		String generalUsageMsg = "usage: Run (slow|normal|fast|faster|fastest|insane|ludicrous)";

		//        if ("fly".equalsIgnoreCase(commandArgs[0])) {
		//            event.setCancelled(true);
		//            if (event.getPlayer().getFlySpeed() == speed_ludicrous){
		//            	event.getPlayer().setFlySpeed(speed_normal);
		//            } else {
		//            	event.getPlayer().setFlySpeed(speed_ludicrous);
		//            }
		//            return;
		//        }

		if ("run".equalsIgnoreCase(commandArgs[0])) {
			event.setCancelled(true);

			Player player = event.getPlayer();

			if (commandArgs.length == 1 || commandArgs.length > 2) {
				player.sendMessage(generalUsageMsg);
				return;
			}

			String command = commandArgs[1].toLowerCase();
			if (speeds.containsKey(command)) {
				Float speed = speeds.get(command);
				playerSpeedCache.put(player, speed);
				player.sendMessage("Your speed is set to: " + command + " (" + speed + ")");
			} else {
				player.sendMessage(command + " is not a valid speed setting\n" + generalUsageMsg);
			}
		}
	}

	@EventHandler
	public void onRun(PlayerToggleSprintEvent event) {
		Player player = event.getPlayer();
		if (!playerSpeedCache.containsKey(player)) {
			playerSpeedCache.put(player,speed_ludicrous);
		}
		if (player.isSprinting()) {
			player.setWalkSpeed(speed_normal);
		} else {
			Float playerSpeed = playerSpeedCache.get(player);
			player.setWalkSpeed(playerSpeed);
		}
	}
}
